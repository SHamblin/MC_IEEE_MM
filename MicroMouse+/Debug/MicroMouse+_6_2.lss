
MicroMouse+_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d29  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000538  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001453  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f8  00000000  00000000  00004a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094a  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000029f4  00000000  00000000  000059ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  000083a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 94 00 	call	0x128	; 0x128 <main>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z11setUpInitalv>:
	result = MSByte;
	result = result << 8;
	result += LSByte;
	
	return result;
}
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	9e e4       	ldi	r25, 0x4E	; 78
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <_Z11setUpInitalv+0x4>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z11setUpInitalv+0xa>
  9a:	00 00       	nop
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	18 b8       	out	0x08, r1	; 8
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	82 e4       	ldi	r24, 0x42	; 66
  b2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  bc:	08 95       	ret

000000be <_Z4beepv>:
	
	return 0.0;		
}

void beep(){//Simple short beep
	DDRD  |= 0b00010000;
  be:	54 9a       	sbi	0x0a, 4	; 10
	PORTD |= 0b00010000;
  c0:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <_Z4beepv+0xa>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_Z4beepv+0x14>
  d2:	00 00       	nop
	
	_delay_ms(100);
	
	PORTD &= 0b11101111;
  d4:	5c 98       	cbi	0x0b, 4	; 11
  d6:	08 95       	ret

000000d8 <__vector_24>:
uint8_t direction = NORTH;
uint8_t walls = 0;
volatile uint8_t command = 0;
volatile bool ready = false;

ISR(TWI_vect){//Interupt routine for I2C slave mode
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	beep();
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z4beepv>
	beep();
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z4beepv>
	beep();
 102:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z4beepv>
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:

int main()
{
	setUpInital();
 128:	0e 94 48 00 	call	0x90	; 0x90 <_Z11setUpInitalv>
	//setUpADC();
	//setUpIMU();
	//setupIR();
	I2C_MODE_FAST
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	sei();//Enable interupts, this is for I2C slave mode
 132:	78 94       	sei
	//beep();
	//motorSpeedBoth(60,60);
	//motorSpeed(100,100);
	for(;;){
		beep();
 134:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z4beepv>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	83 ed       	ldi	r24, 0xD3	; 211
 13c:	90 e3       	ldi	r25, 0x30	; 48
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x16>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x20>
 148:	00 00       	nop
 14a:	f4 cf       	rjmp	.-24     	; 0x134 <main+0xc>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
